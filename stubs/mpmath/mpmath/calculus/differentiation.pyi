from _typeshed import Incomplete
from collections.abc import Generator

iteritems: Incomplete

def difference(ctx, s, n): ...
def hsteps(ctx, f, x, n, prec, **options): ...
def diff(ctx, f, x, n: int = 1, **options): ...
def diffs(ctx, f, x, n: Incomplete | None = None, **options) -> Generator[Incomplete, None, None]: ...
def iterable_to_function(gen): ...
def diffs_prod(ctx, factors) -> Generator[Incomplete, None, None]: ...
def dpoly(n, _cache={}): ...
def diffs_exp(ctx, fdiffs) -> Generator[Incomplete, None, None]: ...
def differint(ctx, f, x, n: int = 1, x0: int = 0): ...
def diffun(ctx, f, n: int = 1, **options): ...
def taylor(ctx, f, x, n, **options): ...
def pade(ctx, a, L, M): ...
