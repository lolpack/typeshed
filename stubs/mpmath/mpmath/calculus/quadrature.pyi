from _typeshed import Incomplete

class QuadratureRule:
    ctx: Incomplete
    standard_cache: Incomplete
    transformed_cache: Incomplete
    interval_count: Incomplete
    def __init__(self, ctx) -> None: ...
    def clear(self) -> None: ...
    def calc_nodes(self, degree, prec, verbose: bool = False) -> None: ...
    def get_nodes(self, a, b, degree, prec, verbose: bool = False): ...
    def transform_nodes(self, nodes, a, b, verbose: bool = False): ...
    def guess_degree(self, prec): ...
    def estimate_error(self, results, prec, epsilon): ...
    def summation(self, f, points, prec, epsilon, max_degree, verbose: bool = False): ...
    def sum_next(self, f, nodes, degree, prec, previous, verbose: bool = False): ...

class TanhSinh(QuadratureRule):
    def sum_next(self, f, nodes, degree, prec, previous, verbose: bool = False): ...
    def calc_nodes(self, degree, prec, verbose: bool = False): ...

class GaussLegendre(QuadratureRule):
    def calc_nodes(self, degree, prec, verbose: bool = False): ...

class QuadratureMethods:
    def __init__(ctx, *args, **kwargs) -> None: ...
    def quad(ctx, f, *points, **kwargs): ...
    def quadts(ctx, *args, **kwargs): ...
    def quadgl(ctx, *args, **kwargs): ...
    def quadosc(
        ctx, f, interval, omega: Incomplete | None = None, period: Incomplete | None = None, zeros: Incomplete | None = None
    ): ...
    def quadsubdiv(ctx, f, interval, tol: Incomplete | None = None, maxintervals: Incomplete | None = None, **kwargs): ...
