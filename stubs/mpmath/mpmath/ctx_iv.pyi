from _typeshed import Incomplete

from .ctx_base import StandardBaseContext
from .libmp import from_rational as from_rational, mpci_exp as mpci_exp, mpci_log as mpci_log, mpi_pow_int as mpi_pow_int

mpi_zero: Incomplete
new: Incomplete

def convert_mpf_(x, prec, rounding): ...

class ivmpf:
    def __new__(cls, x: int = 0): ...
    def cast(self, cls, f_convert): ...
    def __int__(self) -> int: ...
    def __float__(self) -> float: ...
    def __complex__(self) -> complex: ...
    def __hash__(self): ...
    @property
    def real(self): ...
    @property
    def imag(self): ...
    def conjugate(self): ...
    @property
    def a(self): ...
    @property
    def b(self): ...
    @property
    def mid(self): ...
    @property
    def delta(self): ...
    __gt__: Incomplete
    __le__: Incomplete
    __ge__: Incomplete
    def __contains__(self, t) -> bool: ...
    def __eq__(s, t): ...
    def __ne__(s, t): ...
    def __lt__(s, t): ...
    def __le__(s, t): ...
    def __gt__(s, t): ...
    def __ge__(s, t): ...
    def __abs__(self): ...
    def __pos__(self): ...
    def __neg__(self): ...
    def ae(s, t, rel_eps: Incomplete | None = None, abs_eps: Incomplete | None = None): ...

class ivmpc:
    def __new__(cls, re: int = 0, im: int = 0): ...
    def __hash__(self): ...
    @property
    def a(self): ...
    @property
    def b(self): ...
    @property
    def c(self): ...
    @property
    def d(self): ...
    @property
    def real(s): ...
    @property
    def imag(s): ...
    def conjugate(s): ...
    def overlap(s, t): ...
    def __contains__(s, t) -> bool: ...
    def __eq__(s, t): ...
    def __ne__(s, t): ...
    def __lt__(s, t): ...
    __le__ = __lt__
    __gt__ = __lt__
    __ge__ = __lt__
    def __neg__(s): ...
    def __pos__(s): ...
    def __abs__(s): ...
    def ae(s, t, rel_eps: Incomplete | None = None, abs_eps: Incomplete | None = None): ...

class ivmpf_constant(ivmpf):
    def __new__(cls, f): ...

class MPIntervalContext(StandardBaseContext):
    def __init__(ctx) -> None: ...
    prec: Incomplete
    dps: Incomplete
    def make_mpf(ctx, v): ...
    def make_mpc(ctx, v): ...
    def convert(ctx, x): ...
    def nstr(ctx, x, n: int = 5, **kwargs): ...
    def mag(ctx, x): ...
    def isnan(ctx, x): ...
    def isinf(ctx, x): ...
    def isint(ctx, x): ...
    def ldexp(ctx, x, n): ...
    def absmin(ctx, x): ...
    def absmax(ctx, x): ...
    def atan2(ctx, y, x): ...
    def hypsum(ctx, p, q, types, coeffs, z, maxterms: int = 6000, **kwargs): ...
