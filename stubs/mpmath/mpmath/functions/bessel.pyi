def j0(ctx, x): ...
def j1(ctx, x): ...
def besselj(ctx, n, z, derivative: int = 0, **kwargs): ...
def besseli(ctx, n, z, derivative: int = 0, **kwargs): ...
def bessely(ctx, n, z, derivative: int = 0, **kwargs): ...
def besselk(ctx, n, z, **kwargs): ...
def hankel1(ctx, n, x, **kwargs): ...
def hankel2(ctx, n, x, **kwargs): ...
def whitm(ctx, k, m, z, **kwargs): ...
def whitw(ctx, k, m, z, **kwargs): ...
def hyperu(ctx, a, b, z, **kwargs): ...
def struveh(ctx, n, z, **kwargs): ...
def struvel(ctx, n, z, **kwargs): ...
def angerj(ctx, v, z, **kwargs): ...
def webere(ctx, v, z, **kwargs): ...
def lommels1(ctx, u, v, z, **kwargs): ...
def lommels2(ctx, u, v, z, **kwargs): ...
def ber(ctx, n, z, **kwargs): ...
def bei(ctx, n, z, **kwargs): ...
def ker(ctx, n, z, **kwargs): ...
def kei(ctx, n, z, **kwargs): ...
def c_memo(f): ...
def airyai(ctx, z, derivative: int = 0, **kwargs): ...
def airybi(ctx, z, derivative: int = 0, **kwargs): ...
def airyaizero(ctx, k, derivative: int = 0): ...
def airybizero(ctx, k, derivative: int = 0, complex: bool = False): ...
def scorergi(ctx, z, **kwargs): ...
def scorerhi(ctx, z, **kwargs): ...
def coulombc(ctx, l, eta, _cache={}): ...
def coulombf(ctx, l, eta, z, w: int = 1, chop: bool = True, **kwargs): ...
def coulombg(ctx, l, eta, z, w: int = 1, chop: bool = True, **kwargs): ...
def mcmahon(ctx, kind, prime, v, m): ...
def generalized_bisection(ctx, f, a, b, n): ...
def find_in_interval(ctx, f, ab): ...
def bessel_zero(ctx, kind, prime, v, m, isoltol: float = 0.01, _interval_cache={}): ...
def besseljzero(ctx, v, m, derivative: int = 0): ...
def besselyzero(ctx, v, m, derivative: int = 0): ...
