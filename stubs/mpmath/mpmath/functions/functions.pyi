from _typeshed import Incomplete

class SpecialFunctions:
    defined_functions: Incomplete
    THETA_Q_LIM: Incomplete
    mpq_1: Incomplete
    mpq_0: Incomplete
    mpq_1_2: Incomplete
    mpq_3_2: Incomplete
    mpq_1_4: Incomplete
    mpq_1_16: Incomplete
    mpq_3_16: Incomplete
    mpq_5_2: Incomplete
    mpq_3_4: Incomplete
    mpq_7_4: Incomplete
    mpq_5_4: Incomplete
    mpq_1_3: Incomplete
    mpq_2_3: Incomplete
    mpq_4_3: Incomplete
    mpq_1_6: Incomplete
    mpq_5_6: Incomplete
    mpq_5_3: Incomplete
    zetazero_memoized: Incomplete
    def __init__(self) -> None: ...

def defun_wrapped(f): ...
def defun(f): ...
def defun_static(f): ...
def cot(ctx, z): ...
def sec(ctx, z): ...
def csc(ctx, z): ...
def coth(ctx, z): ...
def sech(ctx, z): ...
def csch(ctx, z): ...
def acot(ctx, z): ...
def asec(ctx, z): ...
def acsc(ctx, z): ...
def acoth(ctx, z): ...
def asech(ctx, z): ...
def acsch(ctx, z): ...
def sign(ctx, x): ...
def agm(ctx, a, b: int = 1): ...
def sinc(ctx, x): ...
def sincpi(ctx, x): ...
def expm1(ctx, x): ...
def log1p(ctx, x): ...
def powm1(ctx, x, y): ...
def root(ctx, x, n, k: int = 0): ...
def unitroots(ctx, n, primitive: bool = False): ...
def arg(ctx, x): ...
def fabs(ctx, x): ...
def re(ctx, x): ...
def im(ctx, x): ...
def conj(ctx, x): ...
def polar(ctx, z): ...
def rect(ctx, r, phi): ...
def log(ctx, x, b: Incomplete | None = None): ...
def log10(ctx, x): ...
def fmod(ctx, x, y): ...
def degrees(ctx, x): ...
def radians(ctx, x): ...
def lambertw(ctx, z, k: int = 0): ...
def bell(ctx, n, x: int = 1): ...
def polyexp(ctx, s, z): ...
def cyclotomic(ctx, n, z): ...
def mangoldt(ctx, n): ...
def stirling1(ctx, n, k, exact: bool = False): ...
def stirling2(ctx, n, k, exact: bool = False): ...
