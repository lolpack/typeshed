from _typeshed import Incomplete

def hypercomb(ctx, function, params=[], discard_known_zeros: bool = True, **kwargs): ...
def hyper(ctx, a_s, b_s, z, **kwargs): ...
def hyp0f1(ctx, b, z, **kwargs): ...
def hyp1f1(ctx, a, b, z, **kwargs): ...
def hyp1f2(ctx, a1, b1, b2, z, **kwargs): ...
def hyp2f1(ctx, a, b, c, z, **kwargs): ...
def hyp2f2(ctx, a1, a2, b1, b2, z, **kwargs): ...
def hyp2f3(ctx, a1, a2, b1, b2, b3, z, **kwargs): ...
def hyp2f0(ctx, a, b, z, **kwargs): ...
def hyp3f2(ctx, a1, a2, a3, b1, b2, z, **kwargs): ...
def meijerg(ctx, a_s, b_s, z, r: int = 1, series: Incomplete | None = None, **kwargs): ...
def appellf1(ctx, a, b1, b2, c, x, y, **kwargs): ...
def appellf2(ctx, a, b1, b2, c1, c2, x, y, **kwargs): ...
def appellf3(ctx, a1, a2, b1, b2, c, x, y, **kwargs): ...
def appellf4(ctx, a, b, c1, c2, x, y, **kwargs): ...
def hyper2d(ctx, a, b, x, y, **kwargs): ...
def bihyper(ctx, a_s, b_s, z, **kwargs): ...
