from _typeshed import Incomplete

def stieltjes(ctx, n, a: int = 1): ...
def siegeltheta(ctx, t, derivative: int = 0): ...
def grampoint(ctx, n): ...
def siegelz(ctx, t, **kwargs): ...
def oldzetazero(ctx, n, url: str = "http://www.dtc.umn.edu/~odlyzko/zeta_tables/zeros1"): ...
def riemannr(ctx, x): ...
def primepi(ctx, x): ...
def primepi2(ctx, x): ...
def primezeta(ctx, s): ...
def bernpoly(ctx, n, z): ...
def eulerpoly(ctx, n, z): ...
def eulernum(ctx, n, exact: bool = False): ...
def polylog_series(ctx, s, z): ...
def polylog_continuation(ctx, n, z): ...
def polylog_unitcircle(ctx, n, z): ...
def polylog_general(ctx, s, z): ...
def polylog(ctx, s, z): ...
def clsin(ctx, s, z, pi: bool = False): ...
def clcos(ctx, s, z, pi: bool = False): ...
def altzeta(ctx, s, **kwargs): ...
def zeta(ctx, s, a: int = 1, derivative: int = 0, method: Incomplete | None = None, **kwargs): ...
def dirichlet(ctx, s, chi=[1], derivative: int = 0): ...
def secondzeta_main_term(ctx, s, a, **kwargs): ...
def secondzeta_prime_term(ctx, s, a, **kwargs): ...
def secondzeta_exp_term(ctx, s, a): ...
def secondzeta_singular_term(ctx, s, a, **kwargs): ...
def secondzeta(ctx, s, a: float = 0.015, **kwargs): ...
def lerchphi(ctx, z, s, a): ...
