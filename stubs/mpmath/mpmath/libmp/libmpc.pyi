from _typeshed import Incomplete

from .backend import MPZ_ONE as MPZ_ONE, MPZ_TWO as MPZ_TWO, MPZ_ZERO as MPZ_ZERO
from .libmpf import (
    bctable as bctable,
    bitcount as bitcount,
    mpf_sign as mpf_sign,
    negative_rnd as negative_rnd,
    normalize1 as normalize1,
    round_ceiling as round_ceiling,
    round_down as round_down,
    round_floor as round_floor,
    round_nearest as round_nearest,
    round_up as round_up,
)

mpc_one: Incomplete
mpc_zero: Incomplete
mpc_two: Incomplete
mpc_half: Incomplete

def mpc_is_inf(z): ...
def mpc_is_infnan(z): ...
def mpc_to_str(z, dps, **kwargs): ...
def mpc_to_complex(z, strict: bool = False, rnd="d"): ...
def mpc_hash(z): ...
def mpc_conjugate(z, prec, rnd="d"): ...
def mpc_is_nonzero(z): ...
def mpc_add(z, w, prec, rnd="d"): ...
def mpc_add_mpf(z, x, prec, rnd="d"): ...
def mpc_sub(z, w, prec: int = 0, rnd="d"): ...
def mpc_sub_mpf(z, p, prec: int = 0, rnd="d"): ...
def mpc_pos(z, prec, rnd="d"): ...
def mpc_neg(z, prec: Incomplete | None = None, rnd="d"): ...
def mpc_shift(z, n): ...
def mpc_abs(z, prec, rnd="d"): ...
def mpc_arg(z, prec, rnd="d"): ...
def mpc_floor(z, prec, rnd="d"): ...
def mpc_ceil(z, prec, rnd="d"): ...
def mpc_nint(z, prec, rnd="d"): ...
def mpc_frac(z, prec, rnd="d"): ...
def mpc_mul(z, w, prec, rnd="d"): ...
def mpc_square(z, prec, rnd="d"): ...
def mpc_mul_mpf(z, p, prec, rnd="d"): ...
def mpc_mul_imag_mpf(z, x, prec, rnd="d"): ...
def mpc_mul_int(z, n, prec, rnd="d"): ...
def mpc_div(z, w, prec, rnd="d"): ...
def mpc_div_mpf(z, p, prec, rnd="d"): ...
def mpc_reciprocal(z, prec, rnd="d"): ...
def mpc_mpf_div(p, z, prec, rnd="d"): ...
def complex_int_pow(a, b, n): ...
def mpc_pow(z, w, prec, rnd="d"): ...
def mpc_pow_mpf(z, p, prec, rnd="d"): ...
def mpc_pow_int(z, n, prec, rnd="d"): ...
def mpc_sqrt(z, prec, rnd="d"): ...
def mpc_nthroot_fixed(a, b, n, prec): ...
def mpc_nthroot(z, n, prec, rnd="d"): ...
def mpc_cbrt(z, prec, rnd="d"): ...
def mpc_exp(z, prec, rnd="d"): ...
def mpc_log(z, prec, rnd="d"): ...
def mpc_cos(z, prec, rnd="d"): ...
def mpc_sin(z, prec, rnd="d"): ...
def mpc_tan(z, prec, rnd="d"): ...
def mpc_cos_pi(z, prec, rnd="d"): ...
def mpc_sin_pi(z, prec, rnd="d"): ...
def mpc_cos_sin(z, prec, rnd="d"): ...
def mpc_cos_sin_pi(z, prec, rnd="d"): ...
def mpc_cosh(z, prec, rnd="d"): ...
def mpc_sinh(z, prec, rnd="d"): ...
def mpc_tanh(z, prec, rnd="d"): ...
def mpc_atan(z, prec, rnd="d"): ...

beta_crossover: Incomplete
alpha_crossover: Incomplete

def acos_asin(z, prec, rnd, n): ...
def mpc_acos(z, prec, rnd="d"): ...
def mpc_asin(z, prec, rnd="d"): ...
def mpc_asinh(z, prec, rnd="d"): ...
def mpc_acosh(z, prec, rnd="d"): ...
def mpc_atanh(z, prec, rnd="d"): ...
def mpc_fibonacci(z, prec, rnd="d"): ...
def mpf_expj(x, prec, rnd: str = "f") -> None: ...
def mpc_expj(z, prec, rnd: str = "f"): ...
def mpf_expjpi(x, prec, rnd: str = "f") -> None: ...
def mpc_expjpi(z, prec, rnd: str = "f"): ...

mpc_exp: Incomplete
mpc_sqrt: Incomplete
