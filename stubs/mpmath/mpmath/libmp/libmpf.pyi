from _typeshed import Incomplete
from bisect import bisect as bisect

from .backend import MPZ_TWO as MPZ_TWO, sage as sage
from .libintmath import (
    giant_steps as giant_steps,
    isqrt_fast as isqrt_fast,
    lshift as lshift,
    rshift as rshift,
    sqrt_fixed as sqrt_fixed,
    trailing as trailing,
)

__docformat__: str
getrandbits: Incomplete

def to_pickable(x): ...
def from_pickable(x): ...

class ComplexResult(ValueError): ...

intern: Incomplete
round_nearest: Incomplete
round_floor: Incomplete
round_ceiling: Incomplete
round_up: Incomplete
round_down: Incomplete
round_fast = round_down

def prec_to_dps(n): ...
def dps_to_prec(n): ...
def repr_dps(n): ...

fzero: Incomplete
fnzero: Incomplete
fone: Incomplete
fnone: Incomplete
ftwo: Incomplete
ften: Incomplete
fhalf: Incomplete
fnan: Incomplete
finf: Incomplete
fninf: Incomplete
math_float_inf: Incomplete

def round_int(x, n, rnd): ...

class h_mask_big:
    def __getitem__(self, n): ...

h_mask_small: Incomplete
h_mask: Incomplete
shifts_down: Incomplete

def strict_normalize(sign, man, exp, bc, prec, rnd): ...
def strict_normalize1(sign, man, exp, bc, prec, rnd): ...

normalize = strict_normalize
normalize1 = strict_normalize1

def from_man_exp(man, exp, prec: Incomplete | None = None, rnd="d"): ...

int_cache: Incomplete
from_man_exp: Incomplete

def from_int(n, prec: int = 0, rnd="d"): ...
def to_man_exp(s): ...
def to_int(s, rnd: Incomplete | None = None): ...
def mpf_round_int(s, rnd): ...
def mpf_floor(s, prec: int = 0, rnd="d"): ...
def mpf_ceil(s, prec: int = 0, rnd="d"): ...
def mpf_nint(s, prec: int = 0, rnd="d"): ...
def mpf_frac(s, prec: int = 0, rnd="d"): ...
def from_float(x, prec: int = 53, rnd="d"): ...
def from_npfloat(x, prec: int = 113, rnd="d"): ...
def from_Decimal(x, prec: Incomplete | None = None, rnd="d"): ...
def to_float(s, strict: bool = False, rnd="d"): ...
def from_rational(p, q, prec, rnd="d"): ...
def to_rational(s): ...
def to_fixed(s, prec): ...
def mpf_rand(prec): ...
def mpf_eq(s, t): ...
def mpf_hash(s): ...
def mpf_cmp(s, t): ...
def mpf_lt(s, t): ...
def mpf_le(s, t): ...
def mpf_gt(s, t): ...
def mpf_ge(s, t): ...
def mpf_min_max(seq): ...
def mpf_pos(s, prec: int = 0, rnd="d"): ...
def mpf_neg(s, prec: Incomplete | None = None, rnd="d"): ...
def mpf_abs(s, prec: Incomplete | None = None, rnd="d"): ...
def mpf_sign(s): ...
def mpf_add(s, t, prec: int = 0, rnd="d", _sub: int = 0): ...
def mpf_sub(s, t, prec: int = 0, rnd="d"): ...
def mpf_sum(xs, prec: int = 0, rnd="d", absolute: bool = False): ...
def gmpy_mpf_mul(s, t, prec: int = 0, rnd="d"): ...
def gmpy_mpf_mul_int(s, n, prec, rnd="d"): ...
def python_mpf_mul(s, t, prec: int = 0, rnd="d"): ...
def python_mpf_mul_int(s, n, prec, rnd="d"): ...

mpf_mul = gmpy_mpf_mul
mpf_mul_int = gmpy_mpf_mul_int
mpf_mul = python_mpf_mul
mpf_mul_int = python_mpf_mul_int

def mpf_shift(s, n): ...
def mpf_frexp(x): ...
def mpf_div(s, t, prec, rnd="d"): ...
def mpf_rdiv_int(n, t, prec, rnd="d"): ...
def mpf_mod(s, t, prec, rnd="d"): ...

reciprocal_rnd: Incomplete
negative_rnd: Incomplete

def mpf_pow_int(s, n, prec, rnd="d"): ...
def mpf_perturb(x, eps_sign, prec, rnd): ...
def to_digits_exp(s, dps): ...
def to_str(
    s,
    dps,
    strip_zeros: bool = True,
    min_fixed: Incomplete | None = None,
    max_fixed: Incomplete | None = None,
    show_zero_exponent: bool = False,
): ...
def str_to_man_exp(x, base: int = 10): ...

special_str: Incomplete

def from_str(x, prec, rnd="d"): ...
def from_bstr(x): ...
def to_bstr(x): ...
def mpf_sqrt(s, prec, rnd="d"): ...
def mpf_hypot(x, y, prec, rnd="d"): ...

mpf_add: Incomplete
mpf_sub: Incomplete
mpf_div: Incomplete
mpf_sqrt: Incomplete
