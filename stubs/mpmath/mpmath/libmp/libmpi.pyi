from _typeshed import Incomplete

from .libmpf import (
    ComplexResult as ComplexResult,
    mpf_cmp as mpf_cmp,
    mpf_eq as mpf_eq,
    mpf_floor as mpf_floor,
    mpf_mul_int as mpf_mul_int,
    repr_dps as repr_dps,
    round_down as round_down,
)

def mpi_str(s, prec): ...

mpi_zero: Incomplete
mpi_one: Incomplete

def mpi_eq(s, t): ...
def mpi_ne(s, t): ...
def mpi_lt(s, t): ...
def mpi_le(s, t): ...
def mpi_gt(s, t): ...
def mpi_ge(s, t): ...
def mpi_add(s, t, prec: int = 0): ...
def mpi_sub(s, t, prec: int = 0): ...
def mpi_delta(s, prec): ...
def mpi_mid(s, prec): ...
def mpi_pos(s, prec): ...
def mpi_neg(s, prec: int = 0): ...
def mpi_abs(s, prec: int = 0): ...
def mpi_mul_mpf(s, t, prec): ...
def mpi_div_mpf(s, t, prec): ...
def mpi_mul(s, t, prec: int = 0): ...
def mpi_square(s, prec: int = 0): ...
def mpi_div(s, t, prec): ...
def mpi_pi(prec): ...
def mpi_exp(s, prec): ...
def mpi_log(s, prec): ...
def mpi_sqrt(s, prec): ...
def mpi_atan(s, prec): ...
def mpi_pow_int(s, n, prec): ...
def mpi_pow(s, t, prec): ...
def MIN(x, y): ...
def MAX(x, y): ...
def cos_sin_quadrant(x, wp): ...
def mpi_cos_sin(x, prec): ...
def mpi_cos(x, prec): ...
def mpi_sin(x, prec): ...
def mpi_tan(x, prec): ...
def mpi_cot(x, prec): ...
def mpi_from_str_a_b(x, y, percent, prec): ...
def mpi_from_str(s, prec): ...
def mpi_to_str(x, dps, use_spaces: bool = True, brackets: str = "[]", mode: str = "brackets", error_dps: int = 4, **kwargs): ...
def mpci_add(x, y, prec): ...
def mpci_sub(x, y, prec): ...
def mpci_neg(x, prec: int = 0): ...
def mpci_pos(x, prec): ...
def mpci_mul(x, y, prec): ...
def mpci_div(x, y, prec): ...
def mpci_exp(x, prec): ...
def mpi_shift(x, n): ...
def mpi_cosh_sinh(x, prec): ...
def mpci_cos(x, prec): ...
def mpci_sin(x, prec): ...
def mpci_abs(x, prec): ...
def mpi_atan2(y, x, prec): ...
def mpci_arg(z, prec): ...
def mpci_log(z, prec): ...
def mpci_pow(x, y, prec): ...
def mpci_square(x, prec): ...
def mpci_pow_int(x, n, prec): ...

gamma_min_a: Incomplete
gamma_min_b: Incomplete
gamma_min: Incomplete
gamma_mono_imag_a: Incomplete
gamma_mono_imag_b: Incomplete

def mpi_overlap(x, y): ...
def mpi_gamma(z, prec, type: int = 0): ...
def mpci_gamma(z, prec, type: int = 0): ...
def mpi_loggamma(z, prec): ...
def mpci_loggamma(z, prec): ...
def mpi_rgamma(z, prec): ...
def mpci_rgamma(z, prec): ...
def mpi_factorial(z, prec): ...
def mpci_factorial(z, prec): ...
