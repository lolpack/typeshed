class Eigen: ...

def defun(f): ...
def hessenberg_reduce_0(ctx, A, T) -> None: ...
def hessenberg_reduce_1(ctx, A, T) -> None: ...
def hessenberg(ctx, A, overwrite_a: bool = False): ...
def qr_step(ctx, n0, n1, A, Q, shift) -> None: ...
def hessenberg_qr(ctx, A, Q) -> None: ...
def schur(ctx, A, overwrite_a: bool = False): ...
def eig_tr_r(ctx, A): ...
def eig_tr_l(ctx, A): ...
def eig(ctx, A, left: bool = False, right: bool = True, overwrite_a: bool = False): ...
def eig_sort(ctx, E, EL: bool = False, ER: bool = False, f: str = "real"): ...
