def r_sy_tridiag(ctx, A, D, E, calc_ev: bool = True) -> None: ...
def c_he_tridiag_0(ctx, A, D, E, T) -> None: ...
def c_he_tridiag_1(ctx, A, T) -> None: ...
def c_he_tridiag_2(ctx, A, T, B) -> None: ...
def tridiag_eigen(ctx, d, e, z: bool = False) -> None: ...
def eigsy(ctx, A, eigvals_only: bool = False, overwrite_a: bool = False): ...
def eighe(ctx, A, eigvals_only: bool = False, overwrite_a: bool = False): ...
def eigh(ctx, A, eigvals_only: bool = False, overwrite_a: bool = False): ...
def gauss_quadrature(ctx, n, qtype: str = "legendre", alpha: int = 0, beta: int = 0): ...
def svd_r_raw(ctx, A, V: bool = False, calc_u: bool = False): ...
def svd_c_raw(ctx, A, V: bool = False, calc_u: bool = False): ...
def svd_r(ctx, A, full_matrices: bool = False, compute_uv: bool = True, overwrite_a: bool = False): ...
def svd_c(ctx, A, full_matrices: bool = False, compute_uv: bool = True, overwrite_a: bool = False): ...
def svd(ctx, A, full_matrices: bool = False, compute_uv: bool = True, overwrite_a: bool = False): ...
