from _typeshed import Incomplete

class LinearAlgebraMethods:
    def LU_decomp(ctx, A, overwrite: bool = False, use_cache: bool = True): ...
    def L_solve(ctx, L, b, p: Incomplete | None = None): ...
    def U_solve(ctx, U, y): ...
    def lu_solve(ctx, A, b, **kwargs): ...
    def improve_solution(ctx, A, x, b, maxsteps: int = 1): ...
    def lu(ctx, A): ...
    def unitvector(ctx, n, i): ...
    def inverse(ctx, A, **kwargs): ...
    def householder(ctx, A): ...
    def residual(ctx, A, x, b, **kwargs): ...
    def qr_solve(ctx, A, b, norm: Incomplete | None = None, **kwargs): ...
    def cholesky(ctx, A, tol: Incomplete | None = None): ...
    def cholesky_solve(ctx, A, b, **kwargs): ...
    def det(ctx, A): ...
    def cond(ctx, A, norm: Incomplete | None = None): ...
    def lu_solve_mat(ctx, a, b): ...
    def qr(ctx, A, mode: str = "full", edps: int = 10): ...
