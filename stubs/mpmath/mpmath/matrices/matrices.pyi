from _typeshed import Incomplete

rowsep: str
colsep: str

class _matrix:
    def __init__(self, *args, **kwargs) -> None: ...
    def apply(self, f): ...
    def __nstr__(self, n: Incomplete | None = None, **kwargs): ...
    def tolist(self): ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value) -> None: ...
    def __iter__(self): ...
    def __mul__(self, other): ...
    def __matmul__(self, other): ...
    def __rmul__(self, other): ...
    def __pow__(self, other): ...
    def __div__(self, other): ...
    __truediv__ = __div__
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __sub__(self, other): ...
    def __pos__(self): ...
    def __neg__(self): ...
    def __rsub__(self, other): ...
    def __eq__(self, other): ...
    def __len__(self) -> int: ...
    rows: Incomplete
    cols: Incomplete
    def transpose(self): ...
    T: Incomplete
    def conjugate(self): ...
    def transpose_conj(self): ...
    H: Incomplete
    def copy(self): ...
    __copy__ = copy
    def column(self, n): ...

class MatrixMethods:
    def __init__(ctx) -> None: ...
    def eye(ctx, n, **kwargs): ...
    def diag(ctx, diagonal, **kwargs): ...
    def zeros(ctx, *args, **kwargs): ...
    def ones(ctx, *args, **kwargs): ...
    def hilbert(ctx, m, n: Incomplete | None = None): ...
    def randmatrix(ctx, m, n: Incomplete | None = None, min: int = 0, max: int = 1, **kwargs): ...
    def swap_row(ctx, A, i, j) -> None: ...
    def extend(ctx, A, b): ...
    def norm(ctx, x, p: int = 2): ...
    def mnorm(ctx, A, p: int = 1): ...
