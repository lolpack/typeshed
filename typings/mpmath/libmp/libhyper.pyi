"""
This type stub file was generated by pyright.
"""

from .backend import BACKEND

"""
This module implements computation of hypergeometric and related
functions. In particular, it provides code for generic summation
of hypergeometric series. Optimized versions for various special
cases are also provided.
"""
class NoConvergence(Exception):
    ...


def make_hyp_summator(key): # -> tuple[str, Any]:
    """
    Returns a function that sums a generalized hypergeometric series,
    for given parameter types (integer, rational, real, complex).

    """
    ...

if BACKEND == 'sage':
    def make_hyp_summator(key): # -> tuple[Literal['(none)'], Callable[..., Any]]:
        """
        Returns a function that sums a generalized hypergeometric series,
        for given parameter types (integer, rational, real, complex).
        """
        ...
    
def mpf_erf(x, prec, rnd=...): # -> tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[0], int | Any, Literal[0], Literal[1]] | tuple[Literal[1], int | Any, Literal[0], Literal[1]] | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[1, 0], Any, Any, Any | int]:
    ...

def erfc_check_series(x, prec): # -> bool:
    ...

def mpf_erfc(x, prec, rnd=...): # -> tuple[Literal[0], int | Any, Literal[0], Literal[1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[0], int | Any, Literal[1], Literal[1]] | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]:
    ...

def ei_taylor(x, prec):
    ...

def complex_ei_taylor(zre, zim, prec): # -> tuple[Any, Any]:
    ...

def ei_asymptotic(x, prec):
    ...

def complex_ei_asymptotic(zre, zim, prec): # -> tuple[Any, Any]:
    ...

def mpf_ei(x, prec, rnd=..., e1=...): # -> tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Any | int, int | Any, Any | Literal[-123, 0, -456, -789], Any | Literal[-1, 0, -2, -3, 1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]]:
    ...

def mpc_ei(z, prec, rnd=..., e1=...):
    ...

def mpf_e1(x, prec, rnd=...): # -> tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Any | int, int | Any, Any | Literal[-123, 0, -456, -789], Any | Literal[-1, 0, -2, -3, 1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]]:
    ...

def mpc_e1(x, prec, rnd=...):
    ...

def mpf_expint(n, x, prec, rnd=..., gamma=...):
    """
    E_n(x), n an integer, x real

    With gamma=True, computes Gamma(n,x)   (upper incomplete gamma function)

    Returns (real, None) if real, otherwise (real, imag)
    The imaginary part is an optional branch cut term

    """
    ...

def mpf_ci_si_taylor(x, wp, which=...): # -> tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]:
    """
    0 - Ci(x) - (euler+log(x))
    1 - Si(x)
    """
    ...

def mpc_ci_si_taylor(re, im, wp, which=...): # -> tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any, tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any]:
    ...

def mpf_ci_si(x, prec, rnd=..., which=...): # -> tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]], tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[Any, Any] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]], tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any | int, Any | int, Any | int, Any | Literal[0, 1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Any | Literal[0], int | Any, Any | int, Any | Literal[0, 1]] | None] | tuple[Any | None, Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | None] | tuple[tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any | None, Any | tuple[Any | int, int | Any, Any | int, Any | Literal[-3, -2, 0, 1]] | None] | tuple[Any | None, Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[1, 0], Any, Any, Any | int] | None] | tuple[Any | None, Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | None]:
    """
    Calculation of Ci(x), Si(x) for real x.

    which = 0 -- returns (Ci(x), -)
    which = 1 -- returns (Si(x), -)
    which = 2 -- returns (Ci(x), Si(x))

    Note: if x < 0, Ci(x) needs an additional imaginary term, pi*i.
    """
    ...

def mpf_ci(x, prec, rnd=...): # -> tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | None:
    ...

def mpf_si(x, prec, rnd=...): # -> tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Any | int, Any | int, Any | int, Any | Literal[0, 1]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Any | Literal[0], int | Any, Any | int, Any | Literal[0, 1]] | tuple[Any | int, int | Any, Any | int, Any | Literal[-3, -2, 0, 1]] | tuple[Literal[1, 0], Any, Any, Any | int] | None:
    ...

def mpc_ci(z, prec, rnd=...): # -> tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | None, tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any] | tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | None, tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[Any, Any]:
    ...

def mpc_si(z, prec, rnd=...): # -> tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]] | Any | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Any | int, Any | int, Any | int, Any | Literal[0, 1]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Any | Literal[0], int | Any, Any | int, Any | Literal[0, 1]] | tuple[Any | int, int | Any, Any | int, Any | Literal[-3, -2, 0, 1]] | tuple[Literal[1, 0], Any, Any, Any | int] | None, tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]]:
    ...

def mpf_besseljn(n, x, prec, rounding=...): # -> tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]:
    ...

def mpc_besseljn(n, z, prec, rounding=...): # -> tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any, tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any]:
    ...

def mpf_agm(a, b, prec, rnd=...): # -> tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]:
    """
    Computes the arithmetic-geometric mean agm(a,b) for
    nonnegative mpf values a, b.
    """
    ...

def mpf_agm1(a, prec, rnd=...): # -> tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]:
    """
    Computes the arithmetic-geometric mean agm(1,a) for a nonnegative
    mpf value a.
    """
    ...

def mpc_agm(a, b, prec, rnd=...): # -> tuple[tuple[Literal[0], int | Any, Literal[-123], Literal[-1]], tuple[Literal[0], int | Any, Literal[-123], Literal[-1]]] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]], tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[Any | tuple[Any, Any, Any, Any], Any | tuple[Any, Any, Any, Any]] | None:
    """
    Complex AGM.

    TODO:
    * check that convergence works as intended
    * optimize
    * select a nonarbitrary branch
    """
    ...

def mpc_agm1(a, prec, rnd=...): # -> tuple[tuple[Literal[0], int | Any, Literal[-123], Literal[-1]], tuple[Literal[0], int | Any, Literal[-123], Literal[-1]]] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]], tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[Any | tuple[Any, Any, Any, Any], Any | tuple[Any, Any, Any, Any]] | None:
    ...

def mpf_ellipk(x, prec, rnd=...): # -> tuple[Any | Literal[0], int | Any, Any | int, Any | Literal[0, 1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Any | Literal[0, 1], int | Any, Any | int, Any | Literal[-1, 0, -2, -3, 1]]:
    ...

def mpc_ellipk(z, prec, rnd=...): # -> tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]], tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[Any | tuple[Any | Literal[0], int | Any, Any | int, Any | Literal[0, 1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Any | Literal[0, 1], int | Any, Any | int, Any | Literal[-1, 0, -2, -3, 1]], tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[Any | tuple[Any, Any, Any, Any], Any | tuple[Any, Any, Any, Any]]:
    ...

def mpf_ellipe(x, prec, rnd=...): # -> tuple[Any | Literal[0], int | Any, Any | int, Any | Literal[0, 1]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[0], int | Any, Literal[0], Literal[1]]:
    ...

def mpc_ellipe(z, prec, rnd=...): # -> tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]], tuple[Literal[0], int | Any, Literal[-456], Literal[-2]]] | tuple[Any | tuple[Any | Literal[0], int | Any, Any | int, Any | Literal[0, 1]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[0], int | Any, Literal[0], Literal[1]], tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[Any, Any]:
    ...

