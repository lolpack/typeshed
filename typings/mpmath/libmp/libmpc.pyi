"""
This type stub file was generated by pyright.
"""

from .backend import BACKEND

"""
Low-level functions for complex arithmetic.
"""
mpc_one = ...
mpc_zero = ...
mpc_two = ...
mpc_half = ...
_infs = ...
_infs_nan = ...
def mpc_is_inf(z): # -> bool:
    """Check if either real or imaginary part is infinite"""
    ...

def mpc_is_infnan(z): # -> bool:
    """Check if either real or imaginary part is infinite or nan"""
    ...

def mpc_to_str(z, dps, **kwargs):
    ...

def mpc_to_complex(z, strict=..., rnd=...): # -> complex:
    ...

def mpc_hash(z): # -> int:
    ...

def mpc_conjugate(z, prec, rnd=...): # -> tuple[Any, tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any, Any, Any, Any] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]]:
    ...

def mpc_is_nonzero(z):
    ...

def mpc_add(z, w, prec, rnd=...): # -> tuple[Any, Any]:
    ...

def mpc_add_mpf(z, x, prec, rnd=...): # -> tuple[Any, Any]:
    ...

def mpc_sub(z, w, prec=..., rnd=...): # -> tuple[Any, Any]:
    ...

def mpc_sub_mpf(z, p, prec=..., rnd=...): # -> tuple[Any, Any]:
    ...

def mpc_pos(z, prec, rnd=...): # -> tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]]:
    ...

def mpc_neg(z, prec=..., rnd=...): # -> tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any, Any, Any, Any] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any, Any, Any, Any] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]]:
    ...

def mpc_shift(z, n): # -> tuple[Any | tuple[Any, Any, Any, Any], Any | tuple[Any, Any, Any, Any]]:
    ...

def mpc_abs(z, prec, rnd=...): # -> tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[0], Any, Any, Any] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[1, 0], Any, Any, Any | int]:
    """Absolute value of a complex number, |a+bi|.
    Returns an mpf value."""
    ...

def mpc_arg(z, prec, rnd=...): # -> tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Any | Literal[0], int | Any, Any | int, Any | Literal[0, 1]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Any | int, Any | int, Any | int, Any | Literal[0, 1]] | tuple[Any, Any, Any, Any] | tuple[Literal[1, 0], Any, Any, Any | int]:
    """Argument of a complex number. Returns an mpf value."""
    ...

def mpc_floor(z, prec, rnd=...): # -> tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[0], int | Any, Literal[0], Literal[1]] | tuple[Literal[1], int | Any, Literal[0], Literal[1]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[0], int | Any, Literal[0], Literal[1]] | tuple[Literal[1], int | Any, Literal[0], Literal[1]]]:
    ...

def mpc_ceil(z, prec, rnd=...): # -> tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[0], int | Any, Literal[0], Literal[1]] | tuple[Literal[1], int | Any, Literal[0], Literal[1]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[0], int | Any, Literal[0], Literal[1]] | tuple[Literal[1], int | Any, Literal[0], Literal[1]]]:
    ...

def mpc_nint(z, prec, rnd=...): # -> tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[0], int | Any, Literal[0], Literal[1]] | tuple[Literal[1], int | Any, Literal[0], Literal[1]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[0], int | Any, Literal[0], Literal[1]] | tuple[Literal[1], int | Any, Literal[0], Literal[1]]]:
    ...

def mpc_frac(z, prec, rnd=...): # -> tuple[Any, Any]:
    ...

def mpc_mul(z, w, prec, rnd=...): # -> tuple[Any, Any]:
    """
    Complex multiplication.

    Returns the real and imaginary part of (a+bi)*(c+di), rounded to
    the specified precision. The rounding mode applies to the real and
    imaginary parts separately.
    """
    ...

def mpc_square(z, prec, rnd=...): # -> tuple[Any, Any | tuple[Any, Any, Any, Any]]:
    ...

def mpc_mul_mpf(z, p, prec, rnd=...): # -> tuple[Any, Any]:
    ...

def mpc_mul_imag_mpf(z, x, prec, rnd=...): # -> tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any, Any, Any, Any] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], Any]:
    """
    Multiply the mpc value z by I*x where x is an mpf value.
    """
    ...

def mpc_mul_int(z, n, prec, rnd=...): # -> tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]], tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]]]:
    ...

def mpc_div(z, w, prec, rnd=...): # -> tuple[tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any, tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any]:
    ...

def mpc_div_mpf(z, p, prec, rnd=...): # -> tuple[tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any, tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any]:
    """Calculate z/p where p is real"""
    ...

def mpc_reciprocal(z, prec, rnd=...): # -> tuple[tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any, tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any | int, int | Any, Any | Literal[-123, 0, -456, -789], Any | Literal[-1, 0, -2, -3, 1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]]:
    """Calculate 1/z efficiently"""
    ...

def mpc_mpf_div(p, z, prec, rnd=...): # -> tuple[tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any, tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any]:
    """Calculate p/z where p is real efficiently"""
    ...

def complex_int_pow(a, b, n): # -> tuple[Any | Literal[1], Any | Literal[0]]:
    """Complex integer power: computes (a+b*I)**n exactly for
    nonnegative n (a and b must be Python ints)."""
    ...

def mpc_pow(z, w, prec, rnd=...): # -> tuple[Any, tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]], Any] | tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any, Any, Any, Any] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]], tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any, Any, Any, Any] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[1]], tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]] | tuple[Any, Any | tuple[Any, Any, Any, Any]] | tuple[tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any, tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any | int, int | Any, Any | Literal[-123, 0, -456, -789], Any | Literal[-1, 0, -2, -3, 1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any, tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any] | tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Literal[0], int | Any, Literal[0], Literal[1]], tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[Any, Any]:
    ...

def mpc_pow_mpf(z, p, prec, rnd=...): # -> tuple[Any, tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]], Any] | tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any, Any, Any, Any] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]], tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any, Any, Any, Any] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[1]], tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]] | tuple[Any, Any | tuple[Any, Any, Any, Any]] | tuple[tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any, tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any | int, int | Any, Any | Literal[-123, 0, -456, -789], Any | Literal[-1, 0, -2, -3, 1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any, tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any] | tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Literal[0], int | Any, Literal[0], Literal[1]], tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[Any, Any]:
    ...

def mpc_pow_int(z, n, prec, rnd=...): # -> tuple[Any, tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]], Any] | tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any, Any, Any, Any] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]], tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any, Any, Any, Any] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[1]], tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]] | tuple[Any, Any | tuple[Any, Any, Any, Any]] | tuple[tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any, tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any | int, int | Any, Any | Literal[-123, 0, -456, -789], Any | Literal[-1, 0, -2, -3, 1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any, tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any] | tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Literal[0], int | Any, Literal[0], Literal[1]], tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[Any, Any]:
    ...

def mpc_sqrt(z, prec, rnd=...): # -> tuple[Any, Any] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[1, 0], Any, Any, Any | int]] | tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[1, 0], Any, Any, Any | int], tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Any | int, int | Any, Any | Literal[-123, 0, -456, -789], Any | Literal[-1, 0, -2, -3, 1]] | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]], tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any | tuple[Any | int, Any | int, Any | Literal[0], Any | int] | tuple[Literal[1, 0], Any, Any, Any | int]]:
    """Complex square root (principal branch).

    We have sqrt(a+bi) = sqrt((r+a)/2) + b/sqrt(2*(r+a))*i where
    r = abs(a+bi), when a+bi is not a negative real number."""
    ...

def mpc_nthroot_fixed(a, b, n, prec): # -> tuple[Any | None, Any | None]:
    ...

def mpc_nthroot(z, n, prec, rnd=...): # -> tuple[Any, tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[1]], tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]] | tuple[tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any, tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any, tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any, tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any]:
    """
    Complex n-th root.

    Use Newton method as in the real case when it is faster,
    otherwise use z**(1/n)
    """
    ...

def mpc_cbrt(z, prec, rnd=...): # -> tuple[Any, tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[1]], tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]] | tuple[tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any, tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any, tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any, tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any]:
    """
    Complex cubic root.
    """
    ...

def mpc_exp(z, prec, rnd=...): # -> tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Literal[0], int | Any, Literal[0], Literal[1]], tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[Any, Any]:
    """
    Complex exponential function.

    We use the direct formula exp(a+bi) = exp(a) * (cos(b) + sin(b)*i)
    for the computation. This formula is very nice because it is
    pefectly stable; since we just do real multiplications, the only
    numerical errors that can creep in are single-ulp rounding errors.

    The formula is efficient since mpmath's real exp is quite fast and
    since we can compute cos and sin simultaneously.

    It is no problem if a and b are large; if the implementations of
    exp/cos/sin are accurate and efficient for all real numbers, then
    so is this function for all complex numbers.
    """
    ...

def mpc_log(z, prec, rnd=...): # -> tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any | tuple[Any, Any, Any, Any] | tuple[Any | Literal[1, 0], int | Any, Any | int, Any | int], tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Any | Literal[0], int | Any, Any | int, Any | Literal[0, 1]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Any | int, Any | int, Any | int, Any | Literal[0, 1]] | tuple[Any, Any, Any, Any] | tuple[Literal[1, 0], Any, Any, Any | int]]:
    ...

def mpc_cos(z, prec, rnd=...): # -> tuple[Any, tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Any | Literal[0, 1], Any | int, Any | int, Any | int] | tuple[Literal[1, 0], Any, Any, Any | int] | Literal[0, 1], tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[Any, tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any, Any, Any, Any] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]]:
    """Complex cosine. The formula used is cos(a+bi) = cos(a)*cosh(b) -
    sin(a)*sinh(b)*i.

    The same comments apply as for the complex exp: only real
    multiplications are pewrormed, so no cancellation errors are
    possible. The formula is also efficient since we can compute both
    pairs (cos, sin) and (cosh, sinh) in single stwps."""
    ...

def mpc_sin(z, prec, rnd=...): # -> tuple[Any, tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]], int | Any | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Any | int, Any | int, Any | int, Any | int] | tuple[Any | Literal[0, 1], Any | int, Any | int, Any | int] | tuple[Literal[1, 0], Any, Any, Any | int]] | tuple[Any, Any]:
    """Complex sine. We have sin(a+bi) = sin(a)*cosh(b) +
    cos(a)*sinh(b)*i. See the docstring for mpc_cos for additional
    comments."""
    ...

def mpc_tan(z, prec, rnd=...): # -> tuple[Any, tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]], tuple[Literal[0], int | Any, Literal[0], Literal[1]] | tuple[Literal[1], int | Any, Literal[0], Literal[1]] | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[tuple[Literal[0], int | Any, Literal[-456], Literal[-2]], tuple[Literal[0], int | Any, Literal[-456], Literal[-2]]] | tuple[tuple[Literal[0], int | Any, Literal[-456], Literal[-2]], tuple[Literal[1], int | Any, Literal[-789], Literal[-3]]] | tuple[tuple[Literal[0], int | Any, Literal[-123], Literal[-1]], tuple[Literal[0], int | Any, Literal[-123], Literal[-1]]] | Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]] | tuple[Any | tuple[Any | Literal[0, 1], Any | int, Any | int, Any | int], tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any | int, Any | int, Any | int, Any | int] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Any | Literal[0, 1], Any | int, Any | int, Any | int]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any, tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any]] | tuple[tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any, tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any]:
    """Complex tangent. Computed as tan(a+bi) = sin(2a)/M + sinh(2b)/M*i
    where M = cos(2a) + cosh(2b)."""
    ...

def mpc_cos_pi(z, prec, rnd=...): # -> tuple[Any, tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Any | Literal[0, 1], Any | int, Any | int, Any | int] | tuple[Literal[1, 0], Any, Any, Any | int] | Literal[0, 1], tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[Any, tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any, Any, Any, Any] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]]:
    ...

def mpc_sin_pi(z, prec, rnd=...): # -> tuple[Any, tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]], int | Any | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Any | int, Any | int, Any | int, Any | int] | tuple[Any | Literal[0, 1], Any | int, Any | int, Any | int] | tuple[Literal[1, 0], Any, Any, Any | int]] | tuple[Any, Any]:
    ...

def mpc_cos_sin(z, prec, rnd=...): # -> tuple[tuple[tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Any | Literal[0, 1], Any | int, Any | int, Any | int] | tuple[Literal[1, 0], Any, Any, Any | int] | int, tuple[Literal[0], int | Any, Literal[0], Literal[0]]], tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]], int | Any | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Any | int, Any | int, Any | int, Any | int] | tuple[Any | Literal[0, 1], Any | int, Any | int, Any | int] | tuple[Literal[1, 0], Any, Any, Any | int]]] | tuple[tuple[Any, tuple[Literal[0], int | Any, Literal[0], Literal[0]]], tuple[Any, tuple[Literal[0], int | Any, Literal[0], Literal[0]]]] | tuple[tuple[Any, tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any, Any, Any, Any] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]], tuple[Any, Any]]:
    ...

def mpc_cos_sin_pi(z, prec, rnd=...): # -> tuple[tuple[Any, tuple[Literal[0], int | Any, Literal[0], Literal[0]]], tuple[Any, tuple[Literal[0], int | Any, Literal[0], Literal[0]]]] | tuple[tuple[tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Any | Literal[0, 1], Any | int, Any | int, Any | int] | tuple[Literal[1, 0], Any, Any, Any | int] | int, tuple[Literal[0], int | Any, Literal[0], Literal[0]]], tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]], int | Any | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Any | int, Any | int, Any | int, Any | int] | tuple[Any | Literal[0, 1], Any | int, Any | int, Any | int] | tuple[Literal[1, 0], Any, Any, Any | int]]] | tuple[tuple[Any, tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any, Any, Any, Any] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]], tuple[Any, Any]]:
    ...

def mpc_cosh(z, prec, rnd=...): # -> tuple[Any, tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Any | Literal[0, 1], Any | int, Any | int, Any | int] | tuple[Literal[1, 0], Any, Any, Any | int] | Literal[0, 1], tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[Any, tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any, Any, Any, Any] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]]:
    """Complex hyperbolic cosine. Computed as cosh(z) = cos(z*i)."""
    ...

def mpc_sinh(z, prec, rnd=...): # -> tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]] | int | Any | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Any | int, Any | int, Any | int, Any | int] | tuple[Any | Literal[0, 1], Any | int, Any | int, Any | int] | tuple[Literal[1, 0], Any, Any, Any | int], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]]]:
    """Complex hyperbolic sine. Computed as sinh(z) = -i*sin(z*i)."""
    ...

def mpc_tanh(z, prec, rnd=...): # -> tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[0], int | Any, Literal[0], Literal[1]] | tuple[Literal[1], int | Any, Literal[0], Literal[1]] | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[tuple[Literal[0], int | Any, Literal[-456], Literal[-2]], tuple[Literal[0], int | Any, Literal[-456], Literal[-2]]] | tuple[tuple[Literal[0], int | Any, Literal[-456], Literal[-2]], tuple[Literal[1], int | Any, Literal[-789], Literal[-3]]] | tuple[tuple[Literal[0], int | Any, Literal[-123], Literal[-1]], tuple[Literal[0], int | Any, Literal[-123], Literal[-1]]] | Any | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]] | tuple[Any | tuple[Any | Literal[0, 1], Any | int, Any | int, Any | int], tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any | int, Any | int, Any | int, Any | int] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Any | Literal[0, 1], Any | int, Any | int, Any | int]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any, tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]]:
    """Complex hyperbolic tangent. Computed as tanh(z) = -i*tan(z*i)."""
    ...

def mpc_atan(z, prec, rnd=...): # -> tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any, Any, Any, Any] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any, Any, Any, Any] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], Any | tuple[Any, Any, Any, Any]]:
    ...

beta_crossover = ...
alpha_crossover = ...
def acos_asin(z, prec, rnd, n):
    """ complex acos for n = 0, asin for n = 1
    The algorithm is described in
    T.E. Hull, T.F. Fairgrieve and P.T.P. Tang
    'Implementing the Complex Arcsine and Arcosine Functions
    using Exception Handling',
    ACM Trans. on Math. Software Vol. 23 (1997), p299
    The complex acos and asin can be defined as
    acos(z) = acos(beta) - I*sign(a)* log(alpha + sqrt(alpha**2 -1))
    asin(z) = asin(beta) + I*sign(a)* log(alpha + sqrt(alpha**2 -1))
    where z = a + I*b
    alpha = (1/2)*(r + s); beta = (1/2)*(r - s) = a/alpha
    r = sqrt((a+1)**2 + y**2); s = sqrt((a-1)**2 + y**2)
    These expressions are rewritten in different ways in different
    regions, delimited by two crossovers alpha_crossover and beta_crossover,
    and by abs(a) <= 1, in order to improve the numerical accuracy.
    """
    ...

def mpc_acos(z, prec, rnd=...):
    ...

def mpc_asin(z, prec, rnd=...):
    ...

def mpc_asinh(z, prec, rnd=...): # -> tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any, Any, Any, Any] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], Any]:
    ...

def mpc_acosh(z, prec, rnd=...): # -> tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any, Any, Any, Any] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], Any] | tuple[Any, tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any, Any, Any, Any] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]]:
    ...

def mpc_atanh(z, prec, rnd=...): # -> tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]], Any | tuple[Any, Any, Any, Any]] | tuple[Any | tuple[Any, Any, Any, Any], Any | tuple[Any, Any, Any, Any]]:
    ...

def mpc_fibonacci(z, prec, rnd=...): # -> tuple[tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Any, Any, Any, Any], tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any, tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any]:
    ...

def mpf_expj(x, prec, rnd=...):
    ...

def mpc_expj(z, prec, rnd=...): # -> tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Literal[0], int | Any, Literal[0], Literal[1]], tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[Any, Any]:
    ...

def mpf_expjpi(x, prec, rnd=...):
    ...

def mpc_expjpi(z, prec, rnd=...): # -> tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Literal[0], int | Any, Literal[0], Literal[1]], tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[Any, Any]:
    ...

if BACKEND == 'sage':
    mpc_exp = ...
    mpc_sqrt = ...
