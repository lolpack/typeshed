"""
This type stub file was generated by pyright.
"""

"""
Computational functions for interval arithmetic.

"""
def mpi_str(s, prec): # -> LiteralString:
    ...

mpi_zero = ...
mpi_one = ...
def mpi_eq(s, t):
    ...

def mpi_ne(s, t):
    ...

def mpi_lt(s, t): # -> bool | None:
    ...

def mpi_le(s, t): # -> bool | None:
    ...

def mpi_gt(s, t): # -> bool | None:
    ...

def mpi_ge(s, t): # -> bool | None:
    ...

def mpi_add(s, t, prec=...): # -> tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | Any, tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any]:
    ...

def mpi_sub(s, t, prec=...): # -> tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | Any, tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any]:
    ...

def mpi_delta(s, prec):
    ...

def mpi_mid(s, prec): # -> tuple[Any, Any, Any, Any]:
    ...

def mpi_pos(s, prec): # -> tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]]:
    ...

def mpi_neg(s, prec=...): # -> tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any, Any, Any, Any] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any, Any, Any, Any] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]]:
    ...

def mpi_abs(s, prec=...): # -> tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]]]:
    ...

def mpi_mul_mpf(s, t, prec):
    ...

def mpi_div_mpf(s, t, prec):
    ...

def mpi_mul(s, t, prec=...):
    ...

def mpi_square(s, prec=...): # -> tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]], Any]:
    ...

def mpi_div(s, t, prec):
    ...

def mpi_pi(prec): # -> tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any, tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any]:
    ...

def mpi_exp(s, prec): # -> tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Literal[0], int | Any, Literal[0], Literal[1]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Literal[0], int | Any, Literal[0], Literal[1]]]:
    ...

def mpi_log(s, prec): # -> tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any | tuple[Any, Any, Any, Any], tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any | tuple[Any, Any, Any, Any]]:
    ...

def mpi_sqrt(s, prec): # -> tuple[Any, Any]:
    ...

def mpi_atan(s, prec): # -> tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]] | Any | tuple[Any | Literal[0], int | Any, Any | int, Any | Literal[0, 1]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Any | int, Any | int, Any | int, Any | Literal[0, 1]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[1, 0], Any, Any, Any | int], tuple[Literal[0], int | Any, Literal[0], Literal[0]] | Any | tuple[Any | Literal[0], int | Any, Any | int, Any | Literal[0, 1]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Any | int, Any | int, Any | int, Any | Literal[0, 1]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[1, 0], Any, Any, Any | int]]:
    ...

def mpi_pow_int(s, n, prec): # -> tuple[tuple[Literal[0], int | Any, Literal[0], Literal[1]], tuple[Literal[0], int | Any, Literal[0], Literal[1]]] | tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]], Any]:
    ...

def mpi_pow(s, t, prec): # -> tuple[tuple[Literal[0], int | Any, Literal[0], Literal[1]], tuple[Literal[0], int | Any, Literal[0], Literal[1]]] | tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]], Any] | tuple[Any, Any] | tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Literal[0], int | Any, Literal[0], Literal[1]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Literal[0], int | Any, Literal[0], Literal[1]]]:
    ...

def MIN(x, y):
    ...

def MAX(x, y):
    ...

def cos_sin_quadrant(x, wp): # -> tuple[tuple[Literal[0], int | Any, Literal[0], Literal[1]], tuple[Literal[0], int | Any, Literal[0], Literal[0]], Literal[0]] | tuple[Any, Any, int | Any]:
    ...

def mpi_cos_sin(x, prec): # -> tuple[tuple[tuple[Literal[0], int | Any, Literal[0], Literal[1]], tuple[Literal[0], int | Any, Literal[0], Literal[1]]], tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]], tuple[Literal[0], int | Any, Literal[0], Literal[0]]]] | tuple[tuple[tuple[Literal[1], int | Any, Literal[0], Literal[1]], tuple[Literal[0], int | Any, Literal[0], Literal[1]]], tuple[tuple[Literal[1], int | Any, Literal[0], Literal[1]], tuple[Literal[0], int | Any, Literal[0], Literal[1]]]] | tuple[tuple[tuple[Literal[1], int | Any, Literal[0], Literal[1]] | tuple[Literal[0], int | Any, Literal[0], Literal[1]] | Any, tuple[Literal[1], int | Any, Literal[0], Literal[1]] | tuple[Literal[0], int | Any, Literal[0], Literal[1]] | Any], tuple[tuple[Literal[1], int | Any, Literal[0], Literal[1]] | tuple[Literal[0], int | Any, Literal[0], Literal[1]] | Any, tuple[Literal[1], int | Any, Literal[0], Literal[1]] | tuple[Literal[0], int | Any, Literal[0], Literal[1]] | Any]]:
    ...

def mpi_cos(x, prec): # -> tuple[tuple[Literal[0], int | Any, Literal[0], Literal[1]], tuple[Literal[0], int | Any, Literal[0], Literal[1]]] | tuple[tuple[Literal[1], int | Any, Literal[0], Literal[1]], tuple[Literal[0], int | Any, Literal[0], Literal[1]]] | tuple[tuple[Literal[1], int | Any, Literal[0], Literal[1]] | tuple[Literal[0], int | Any, Literal[0], Literal[1]] | Any, tuple[Literal[1], int | Any, Literal[0], Literal[1]] | tuple[Literal[0], int | Any, Literal[0], Literal[1]] | Any]:
    ...

def mpi_sin(x, prec): # -> tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]], tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[tuple[Literal[1], int | Any, Literal[0], Literal[1]], tuple[Literal[0], int | Any, Literal[0], Literal[1]]] | tuple[tuple[Literal[1], int | Any, Literal[0], Literal[1]] | tuple[Literal[0], int | Any, Literal[0], Literal[1]] | Any, tuple[Literal[1], int | Any, Literal[0], Literal[1]] | tuple[Literal[0], int | Any, Literal[0], Literal[1]] | Any]:
    ...

def mpi_tan(x, prec):
    ...

def mpi_cot(x, prec):
    ...

def mpi_from_str_a_b(x, y, percent, prec): # -> tuple[Any, Any]:
    ...

def mpi_from_str(s, prec): # -> tuple[Any, Any] | tuple[tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any | tuple[Literal[1, 0], Any, Any, Any | int], tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any | tuple[Literal[1, 0], Any, Any, Any | int]]:
    """
    Parse an interval number given as a string.

    Allowed forms are

    "-1.23e-27"
        Any single decimal floating-point literal.
    "a +- b"  or  "a (b)"
        a is the midpoint of the interval and b is the half-width
    "a +- b%"  or  "a (b%)"
        a is the midpoint of the interval and the half-width
        is b percent of a (`a \times b / 100`).
    "[a, b]"
        The interval indicated directly.
    "x[y,z]e"
        x are shared digits, y and z are unequal digits, e is the exponent.

    """
    ...

def mpi_to_str(x, dps, use_spaces=..., brackets=..., mode=..., error_dps=..., **kwargs): # -> str:
    """
    Convert a mpi interval to a string.

    **Arguments**

    *dps*
        decimal places to use for printing
    *use_spaces*
        use spaces for more readable output, defaults to true
    *brackets*
        pair of strings (or two-character string) giving left and right brackets
    *mode*
        mode of display: 'plusminus', 'percent', 'brackets' (default) or 'diff'
    *error_dps*
        limit the error to *error_dps* digits (mode 'plusminus and 'percent')

    Additional keyword arguments are forwarded to the mpf-to-string conversion
    for the components of the output.

    **Examples**

        >>> from mpmath import mpi, mp
        >>> mp.dps = 30
        >>> x = mpi(1, 2)._mpi_
        >>> mpi_to_str(x, 2, mode='plusminus')
        '1.5 +- 0.5'
        >>> mpi_to_str(x, 2, mode='percent')
        '1.5 (33.33%)'
        >>> mpi_to_str(x, 2, mode='brackets')
        '[1.0, 2.0]'
        >>> mpi_to_str(x, 2, mode='brackets' , brackets=('<', '>'))
        '<1.0, 2.0>'
        >>> x = mpi('5.2582327113062393041', '5.2582327113062749951')._mpi_
        >>> mpi_to_str(x, 15, mode='diff')
        '5.2582327113062[4, 7]'
        >>> mpi_to_str(mpi(0)._mpi_, 2, mode='percent')
        '0.0 (0.0%)'

    """
    ...

def mpci_add(x, y, prec): # -> tuple[tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | Any, tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any], tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | Any, tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any]]:
    ...

def mpci_sub(x, y, prec): # -> tuple[tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | Any, tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any], tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | Any, tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any]]:
    ...

def mpci_neg(x, prec=...): # -> tuple[tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any, Any, Any, Any] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any, Any, Any, Any] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]], tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any, Any, Any, Any] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any, Any, Any, Any] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]]]:
    ...

def mpci_pos(x, prec): # -> tuple[tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]], tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]]]:
    ...

def mpci_mul(x, y, prec): # -> tuple[tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | Any, tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any], tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | Any, tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any]]:
    ...

def mpci_div(x, y, prec): # -> tuple[Any, Any]:
    ...

def mpci_exp(x, prec): # -> tuple[Any, Any]:
    ...

def mpi_shift(x, n): # -> tuple[Any | tuple[Any, Any, Any, Any], Any | tuple[Any, Any, Any, Any]]:
    ...

def mpi_cosh_sinh(x, prec): # -> tuple[tuple[Any | tuple[Any, Any, Any, Any], Any | tuple[Any, Any, Any, Any]], tuple[Any | tuple[Any, Any, Any, Any], Any | tuple[Any, Any, Any, Any]]]:
    ...

def mpci_cos(x, prec): # -> tuple[Any, tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any, Any, Any, Any] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any | tuple[Any, Any, Any, Any] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]]]:
    ...

def mpci_sin(x, prec): # -> tuple[Any, Any]:
    ...

def mpci_abs(x, prec): # -> tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]]] | tuple[Any, Any]:
    ...

def mpi_atan2(y, x, prec): # -> tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]], tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any, tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Any | Literal[0], int | Any, Any | int, Any | Literal[0, 1]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Any | int, Any | int, Any | int, Any | Literal[0, 1]] | tuple[Any, Any, Any, Any] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Any | int, int | Any, Any | Literal[0], Any | Literal[0, 1]], tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Any | Literal[0], int | Any, Any | int, Any | Literal[0, 1]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Any | int, Any | int, Any | int, Any | Literal[0, 1]] | tuple[Any, Any, Any, Any] | tuple[Literal[1, 0], Any, Any, Any | int]]:
    ...

def mpci_arg(z, prec): # -> tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]], tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any, tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Any | Literal[0], int | Any, Any | int, Any | Literal[0, 1]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Any | int, Any | int, Any | int, Any | Literal[0, 1]] | tuple[Any, Any, Any, Any] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Any | int, int | Any, Any | Literal[0], Any | Literal[0, 1]], tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Any | Literal[0], int | Any, Any | int, Any | Literal[0, 1]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Any | int, Any | int, Any | int, Any | Literal[0, 1]] | tuple[Any, Any, Any, Any] | tuple[Literal[1, 0], Any, Any, Any | int]]:
    ...

def mpci_log(z, prec): # -> tuple[tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any | tuple[Any, Any, Any, Any], tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any | tuple[Any, Any, Any, Any]], tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]], tuple[Literal[0], int | Any, Literal[0], Literal[0]]] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any, tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any] | tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Any | Literal[0], int | Any, Any | int, Any | Literal[0, 1]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Any | int, Any | int, Any | int, Any | Literal[0, 1]] | tuple[Any, Any, Any, Any] | tuple[Literal[1, 0], Any, Any, Any | int] | tuple[Any | int, int | Any, Any | Literal[0], Any | Literal[0, 1]], tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]] | Any | tuple[Literal[0], int | Any, Literal[-123], Literal[-1]] | tuple[Any | Literal[0], int | Any, Any | int, Any | Literal[0, 1]] | tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | tuple[Any | int, Any | int, Any | int, Any | Literal[0, 1]] | tuple[Any, Any, Any, Any] | tuple[Literal[1, 0], Any, Any, Any | int]]]:
    ...

def mpci_pow(x, y, prec): # -> tuple[Any, Any] | tuple[tuple[tuple[Literal[0], int | Any, Literal[0], Literal[1]], tuple[Literal[0], int | Any, Literal[0], Literal[1]]], tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]], tuple[Literal[0], int | Any, Literal[0], Literal[0]]]] | tuple[tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]], tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]]] | tuple[tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | Any, tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any], tuple[Any | tuple[Any, Any, Any, Any], Any | tuple[Any, Any, Any, Any]]]:
    ...

def mpci_square(x, prec): # -> tuple[tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | Any, tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any], tuple[Any | tuple[Any, Any, Any, Any], Any | tuple[Any, Any, Any, Any]]]:
    ...

def mpci_pow_int(x, n, prec): # -> tuple[Any, Any] | tuple[tuple[tuple[Literal[0], int | Any, Literal[0], Literal[1]], tuple[Literal[0], int | Any, Literal[0], Literal[1]]], tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]], tuple[Literal[0], int | Any, Literal[0], Literal[0]]]] | tuple[tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]], tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]]] | tuple[tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | Any, tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any], tuple[Any | tuple[Any, Any, Any, Any], Any | tuple[Any, Any, Any, Any]]]:
    ...

gamma_min_a = ...
gamma_min_b = ...
gamma_min = ...
gamma_mono_imag_a = ...
gamma_mono_imag_b = ...
def mpi_overlap(x, y): # -> bool:
    ...

def mpi_gamma(z, prec, type=...): # -> tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | Any, tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any] | tuple[Any, Any]:
    ...

def mpci_gamma(z, prec, type=...): # -> tuple[Any | tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | Any, tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any] | tuple[Any, Any], tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]], tuple[Literal[0], int | Any, Literal[0], Literal[0]]]] | tuple[Any, Any] | tuple[tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | Any, tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any], tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | Any, tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any]] | tuple[tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]], tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]]]:
    ...

def mpi_loggamma(z, prec): # -> tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | Any, tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any] | tuple[Any, Any]:
    ...

def mpci_loggamma(z, prec): # -> tuple[Any | tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | Any, tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any] | tuple[Any, Any], tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]], tuple[Literal[0], int | Any, Literal[0], Literal[0]]]] | tuple[Any, Any] | tuple[tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | Any, tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any], tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | Any, tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any]] | tuple[tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]], tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]]]:
    ...

def mpi_rgamma(z, prec): # -> tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | Any, tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any] | tuple[Any, Any]:
    ...

def mpci_rgamma(z, prec): # -> tuple[Any | tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | Any, tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any] | tuple[Any, Any], tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]], tuple[Literal[0], int | Any, Literal[0], Literal[0]]]] | tuple[Any, Any] | tuple[tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | Any, tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any], tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | Any, tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any]] | tuple[tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]], tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]]]:
    ...

def mpi_factorial(z, prec): # -> tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | Any, tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any] | tuple[Any, Any]:
    ...

def mpci_factorial(z, prec): # -> tuple[Any | tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | Any, tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any] | tuple[Any, Any], tuple[tuple[Literal[0], int | Any, Literal[0], Literal[0]], tuple[Literal[0], int | Any, Literal[0], Literal[0]]]] | tuple[Any, Any] | tuple[tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | Any, tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any], tuple[tuple[Literal[1], int | Any, Literal[-789], Literal[-3]] | Any, tuple[Literal[0], int | Any, Literal[-456], Literal[-2]] | Any]] | tuple[tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]], tuple[Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]], Any | tuple[Literal[0], int | Any, Literal[0], Literal[0]] | tuple[Any, Any, Any, Any] | tuple[Any, Any | Literal[1], Any, Any | Literal[1]]]]:
    ...

